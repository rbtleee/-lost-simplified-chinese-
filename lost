import random
from collections import defaultdict
from datetime import datetime, timedelta

class Pet:
    def __init__(self, name, pet_type):
        self.name = name
        self.type = pet_type
        self.level = 1
        self.exp = 0
        self.hunger = 0
        
    def feed(self):
        self.hunger = 0
        return True
    
    def gain_exp(self, amount):
        self.exp += amount
        if self.exp >= self.level * 10:
            self.level_up()
    
    def level_up(self):
        self.level += 1
        self.exp = 0
        print(f"{self.name}升级到了{self.level}级！")

class Player:
    def __init__(self):
        self.health = 100
        self.max_health = 100
        self.stamina = 100
        self.max_stamina = 100
        self.energy = 80  
        self.max_energy = 100
        self.day = 1
        self.exp = 0
        self.level = 1
        self.last_eaten = datetime.now()
        self.health_points = 30  
        self.consecutive_healthy_days = 0
        
        self.sword_level = 1
        self.armor_level = 1
        self.passive_skills = defaultdict(int)  
        
        self.inventory = defaultdict(int)
        self.inventory.update({
            '石头': 0,
            '木头': 0,
            '纤维': 0,
            '钥匙': 0,
            '盐': 0,
            '生肉': 0,
            '熏肉': 0,
            '鱼': 0,
            '熏鱼': 0,
            '兽皮': 0,
            '水晶': 0,
            '草药': 0
        })
        
        self.pets = []
        self.active_pet = None
        self.food_expiry = {}
        self.unlocked_secret = False
        self.unlocked_ship = False
        self.monster_skills = defaultdict(int)
    
    def show_status(self):
        print(f"\n============== 第{self.day}天 ==============")
        print(f"生命: {self.health}/{self.max_health} | 体力: {self.stamina}/{self.max_stamina}")
        print(f"精力: {self.energy}/{self.max_energy} | 健康值: {self.health_points}/50")
        print(f"等级: {self.level} (经验: {self.exp}/{self.level*100})")
        print(f"武器: Lv{self.sword_level} | 护甲: Lv{self.armor_level}")
        
        if self.passive_skills:
            print("被动技能:")
            for skill, level in self.passive_skills.items():
                print(f"  {skill} Lv{level}", end=" | ")
            print()
        
        if self.monster_skills:
            print("怪物技能:")
            for skill, level in self.monster_skills.items():
                print(f"  {skill} Lv{level}", end=" | ")
            print()
        
        if self.active_pet:
            print(f"携带宠物: {self.active_pet.name} (Lv{self.active_pet.level}, 饥饿度: {self.active_pet.hunger}/10)")
        
        print("\n资源:")
        for item, count in self.inventory.items():
            if count > 0:
                expiry = self.food_expiry.get(item, None)
                if expiry:
                    remaining = (expiry - datetime.now()).total_seconds() / 3600
                    print(f"{item}: {count} (保质期: {int(remaining)}小时)", end=" | ")
                else:
                    print(f"{item}: {count}", end=" | ")
        
        print("\n\n当前进度:")
        if self.unlocked_ship:
            print("已解锁造船技术")
        elif self.unlocked_secret:
            print("已发现岛屿秘密")
    
    def gain_exp(self, amount):
        self.exp += amount
        if self.exp >= self.level * 100:
            self.level_up()
    
    def level_up(self):
        self.level += 1
        self.exp = 0
        prev_max_health = self.max_health
        prev_max_stamina = self.max_stamina
        prev_max_energy = self.max_energy
        
        self.max_health += 10
        self.max_stamina += 10
        self.max_energy += 10
        
        print(f"\n=== 升级到 {self.level} 级! ===")
        print(f"最大生命值 {prev_max_health} → {self.max_health}")
        print(f"最大体力值 {prev_max_stamina} → {self.max_stamina}")
        print(f"最大精力值 {prev_max_energy} → {self.max_energy}")
        
        # 提供技能选择
        skill_options = [
            "生命恢复+", "暴击率+", "伤害减免+", 
            "采集效率+", "战斗经验+"
        ]
        
        print("\n选择一个新技能:")
        for i, skill in enumerate(skill_options, 1):
            current_level = self.passive_skills.get(skill, 0)
            print(f"{i}. {skill} (当前等级: {current_level})")
        
        try:
            choice = int(input("输入编号选择技能: ")) - 1
            if 0 <= choice < len(skill_options):
                selected_skill = skill_options[choice]
                self.passive_skills[selected_skill] += 1
                print(f"获得新技能: {selected_skill} Lv{self.passive_skills[selected_skill]}")
            else:
                print("无效选择，随机分配技能")
                selected_skill = random.choice(skill_options)
                self.passive_skills[selected_skill] += 1
                print(f"获得新技能: {selected_skill} Lv{self.passive_skills[selected_skill]}")
        except ValueError:
            print("无效输入，随机分配技能")
            selected_skill = random.choice(skill_options)
            self.passive_skills[selected_skill] += 1
            print(f"获得新技能: {selected_skill} Lv{self.passive_skills[selected_skill]}")
    
    def consume_stamina(self, amount):
        if self.stamina >= amount:
            self.stamina -= amount
            return True
        else:
            print(f"体力不足！当前体力: {self.stamina}/{self.max_stamina}")
            
            edible = [item for item in ['生肉', '熏肉', '鱼', '熏鱼'] if self.inventory[item] > 0]
            if edible:
                print("你可以食用以下食物补充体力:")
                for i, item in enumerate(edible, 1):
                    print(f"{i}. {item}")
                
                try:
                    choice = int(input("选择要食用的食物(输入编号，0取消): "))
                    if 1 <= choice <= len(edible):
                        food_type = edible[choice-1]
                        stamina_amount = {
                            '生肉': 20,
                            '熏肉': 30,
                            '鱼': 25,
                            '熏鱼': 40
                        }.get(food_type, 0)
                        
                        self.stamina = min(self.max_stamina, self.stamina + stamina_amount)
                        self.inventory[food_type] -= 1
                        self.last_eaten = datetime.now()
                        
                        print(f"食用{food_type}，恢复了{stamina_amount}体力")
                        return self.stamina >= amount
                    else:
                        print("取消进食")
                except ValueError:
                    print("无效输入")
            
            return False
    
    def consume_energy(self, amount):
        if self.energy >= amount:
            self.energy -= amount
            return True
        else:
            print(f"精力不足！当前精力: {self.energy}/{self.max_energy}")
            return False
    
    def check_food_expiry(self):
        now = datetime.now()
        expired_items = []
        
        for item, expiry in list(self.food_expiry.items()):
            if now >= expiry:
                expired_items.append(item)
                
        for item in expired_items:
            if self.inventory[item] > 0:  # 确保有该物品才处理
                self.inventory[item] = 0
                del self.food_expiry[item]
                print(f"{item}已经腐烂了！")
                self.health_points = max(0, self.health_points - 1)
    
    def eat_food(self):
        print("\n可食用物品:")
        edible = []
        for item in ['生肉', '熏肉', '鱼', '熏鱼']:
            if self.inventory[item] > 0:
                edible.append(item)
        
        if not edible:
            print("没有可食用的食物")
            return
        
        for i, item in enumerate(edible, 1):
            print(f"{i}. {item}")
        
        try:
            choice = int(input("选择要食用的食物(输入编号): ")) - 1
            if 0 <= choice < len(edible):
                food_type = edible[choice]
                heal_amount = {
                    '生肉': 15,
                    '熏肉': 25,
                    '鱼': 20,
                    '熏鱼': 30
                }.get(food_type, 0)
                
                stamina_amount = {
                    '生肉': 20,
                    '熏肉': 30,
                    '鱼': 25,
                    '熏鱼': 40
                }.get(food_type, 0)
                
                energy_amount = {
                    '生肉': 5,
                    '熏肉': 8,
                    '鱼': 6,
                    '熏鱼': 10
                }.get(food_type, 0)
                
                self.health = min(self.max_health, self.health + heal_amount)
                self.stamina = min(self.max_stamina, self.stamina + stamina_amount)
                self.energy = min(self.max_energy, self.energy + energy_amount)
                self.inventory[food_type] -= 1
                self.last_eaten = datetime.now()
                
                print(f"食用{food_type}，恢复了{heal_amount}生命、{stamina_amount}体力和{energy_amount}精力")
                
                if food_type in ['熏肉', '熏鱼']:
                    self.health_points = min(50, self.health_points + 1)
                elif food_type == '生肉':
                    self.health_points = max(0, self.health_points - 1)
                
                if food_type in self.food_expiry:
                    del self.food_expiry[food_type]
                
                if self.active_pet:
                    self.active_pet.feed()
                    print(f"{self.active_pet.name}也吃饱了！")
                
                self.gain_exp(5)
            else:
                print("无效选择！")
        except ValueError:
            print("请输入有效的数字")
    
    def sleep(self):
        print("\n============== 休息 ==============")
        heal_amount = int(self.max_health * 0.3)
        self.health = min(self.max_health, self.health + heal_amount)
        self.stamina = self.max_stamina
        self.energy = self.max_energy
        
        if self.health >= self.max_health * 0.8:
            self.consecutive_healthy_days += 1
            if self.consecutive_healthy_days >= 3:
                self.health_points = min(50, self.health_points + 1)
                self.consecutive_healthy_days = 0
                print("连续保持健康，健康值+1")
        else:
            self.consecutive_healthy_days = 0
       
        if self.inventory['木头'] >= 2 and self.inventory['纤维'] >= 1:
            choice = input("要搭建帐篷吗？(消耗2木头和1纤维)(y/n): ").lower()
            if choice == 'y':
                self.inventory['木头'] -= 2
                self.inventory['纤维'] -= 1
                extra_heal = random.randint(15, 25)
                self.health = min(self.max_health, self.health + extra_heal)
                print(f"你搭建了帐篷，额外恢复了{extra_heal}点生命值")
                self.health_points = min(50, self.health_points + 1)
            else:
                if random.random() < 0.6:
                    damage = random.randint(5, 15)
                    self.health -= damage
                    print(f"你受凉了，损失了{damage}点生命值")
                    self.health_points = max(0, self.health_points - 1)
        else:
            print("没有足够的材料搭建帐篷...")
            if random.random() < 0.6:
                damage = random.randint(5, 15)
                self.health -= damage
                print(f"你受凉了，损失了{damage}点生命值")
                self.health_points = max(0, self.health_points - 1)
        
        if self.active_pet:
            self.active_pet.hunger += 1
            if self.active_pet.hunger >= 10:
                print(f"\n警告：{self.active_pet.name}非常饥饿！明天必须喂食！")
        
        self.day += 1
        print(f"\n第{self.day}天开始了！")
        print(f"恢复了{heal_amount}生命值，体力和精力完全恢复")
        self.gain_exp(5)
    
    def upgrade_equipment(self):
        print("\n============== 装备升级 ==============")
        print(f"当前武器等级: {self.sword_level}")
        print(f"当前护甲等级: {self.armor_level}")
        
        options = []
        if self.inventory['石头'] >= 5 and self.inventory['木头'] >= 3:
            options.append(('升级武器', '消耗5石头和3木头提升武器等级'))
        if self.inventory['兽皮'] >= 3 and self.inventory['纤维'] >= 5:
            options.append(('升级护甲', '消耗3兽皮和5纤维提升护甲等级'))
        
        if not options:
            print("没有足够的材料升级装备")
            return
        
        for i, (name, desc) in enumerate(options, 1):
            print(f"{i}. {name}: {desc}")
        
        try:
            choice = int(input("选择要升级的装备(输入编号): ")) - 1
            if 0 <= choice < len(options):
                action = options[choice][0]
                
                if action == '升级武器':
                    self.inventory['石头'] -= 5
                    self.inventory['木头'] -= 3
                    self.sword_level += 1
                    print("武器等级提升1级！")
                elif action == '升级护甲':
                    self.inventory['兽皮'] -= 3
                    self.inventory['纤维'] -= 5
                    self.armor_level += 1
                    print("护甲等级提升1级！")
                
                self.gain_exp(10)
            else:
                print("无效选择！")
        except ValueError:
            print("请输入有效的数字")
    
    def manage_pets(self):
        print("\n============== 宠物管理 ==============")
        if not self.pets:
            print("你还没有宠物")
            return
        
        print("你的宠物:")
        for i, pet in enumerate(self.pets, 1):
            print(f"{i}. {pet.name} ({pet.type}, Lv{pet.level}, 饥饿度: {pet.hunger}/10)")
        
        print("\n选项:")
        print("1. 携带宠物")
        print("2. 放回宠物")
        print("3. 喂食宠物")
        print("4. 返回")
        
        try:
            choice = int(input("选择操作(输入编号): "))
            
            if choice == 1:
                pet_idx = int(input("选择要携带的宠物(输入编号): ")) - 1
                if 0 <= pet_idx < len(self.pets):
                    self.active_pet = self.pets[pet_idx]
                    print(f"现在携带{self.active_pet.name}")
                else:
                    print("无效选择！")
            
            elif choice == 2:
                if self.active_pet:
                    print(f"已将{self.active_pet.name}放回")
                    self.active_pet = None
                else:
                    print("当前没有携带宠物")
            
            elif choice == 3:
                if not self.pets:
                    print("没有宠物可以喂食")
                    return
                
                pet_idx = int(input("选择要喂食的宠物(输入编号): ")) - 1
                if 0 <= pet_idx < len(self.pets):
                    if self.inventory['生肉'] > 0 or self.inventory['鱼'] > 0:
                        food_choice = input("选择喂食的食物(1.生肉 2.鱼): ")
                        if food_choice == '1' and self.inventory['生肉'] > 0:
                            self.inventory['生肉'] -= 1
                            self.pets[pet_idx].feed()
                            print(f"{self.pets[pet_idx].name}吃饱了！")
                        elif food_choice == '2' and self.inventory['鱼'] > 0:
                            self.inventory['鱼'] -= 1
                            self.pets[pet_idx].feed()
                            print(f"{self.pets[pet_idx].name}吃饱了！")
                        else:
                            print("没有足够的食物")
                    else:
                        print("没有可喂食的食物")
                else:
                    print("无效选择！")
            
            elif choice == 4:
                return
            
            else:
                print("无效选择！")
        except ValueError:
            print("请输入有效的数字")

def forest_event(player):
    print("\n============== 森林探索 ==============")
    
    if not player.consume_stamina(15) or not player.consume_energy(10):
        return
    
    # 基础资源
    wood_gain = random.randint(2, 4)
    fibre_gain = random.randint(1, 3)
    
    # 宠物和技能加成
    pet_bonus = 1.0
    if player.active_pet:
        pet_bonus += player.active_pet.level * 0.1
        print(f"{player.active_pet.name}帮你寻找资源！")
    
    if "采集效率+" in player.passive_skills:
        pet_bonus += player.passive_skills["采集效率+"] * 0.1
    
    wood_gain = int(wood_gain * pet_bonus)
    fibre_gain = int(fibre_gain * pet_bonus)
    
    player.inventory['木头'] += wood_gain
    player.inventory['纤维'] += fibre_gain
    print(f"收集到木头×{wood_gain}和纤维×{fibre_gain}")
    
    # 浆果事件
    action = input("\n要采集浆果吗？(消耗5体力)(y/n): ").lower()
    if action == 'y' and player.consume_stamina(5):
        if random.random() < 0.7:
            heal = random.randint(10, 25)
            player.health = min(player.max_health, player.health + heal)
            stm = random.randint(10, 15)
            player.stamina = min(player.max_stamina, player.stamina + stm)
            eng = random.randint(2, 5)
            player.energy = min(player.max_energy, player.energy + eng)
            print(f"浆果很美味，恢复了{heal}点生命值,{stm}点体力,{eng}点精力！")
            player.health_points = min(50, player.health_points + 1)
        else:
            damage = random.randint(10, 20)
            player.health -= damage
            print(f"浆果有毒！你损失了{damage}点生命值！")
            player.health_points = max(0, player.health_points - 1)
    
    # 野兽遭遇 (30%几率)
    if random.random() < 0.3:
        beast_event(player, "森林")
    
    # 宠物发现 (10%几率)
    if random.random() < 0.1 and len(player.pets) < 5:
        pet_types = ["小狗", "小猫", "狐狸", "狼崽", "熊崽", "小猪"]
        new_pet = Pet(f"未命名", random.choice(pet_types))
        player.pets.append(new_pet)
        print(f"\n你在森林中发现了一只可爱的{new_pet.type}！")
        name = input("给你的新宠物起个名字: ")
        new_pet.name = name
        print(f"{name}加入了你的队伍！")

def cave_event(player):
    print("\n============== 洞穴探索 ==============")
    
    if not player.consume_stamina(20) or not player.consume_energy(10):
        return
    
    # 资源或战斗
    if random.random() > 0.7:  # 30%几率获得资源
        stone_gain = random.randint(1, 3) * (player.sword_level + player.armor_level) // 2
        
        # 宠物和技能加成
        if player.active_pet:
            stone_gain = int(stone_gain * (1 + player.active_pet.level * 0.1))
            print(f"{player.active_pet.name}帮你寻找矿石！")
        
        if "采集效率+" in player.passive_skills:
            stone_gain += player.passive_skills["采集效率+"] * 1
        
        player.inventory['石头'] += stone_gain
        print(f"发现石头×{stone_gain}")
    else:  # 70%几率遇到野兽
        beast_event(player, "洞穴")
    
    # 宝箱事件
    if player.inventory['钥匙'] > 0:
        action = input("\n要打开洞穴深处的宝箱吗？(消耗10体力)(y/n): ").lower()
        if action == 'y' and player.consume_stamina(10):
            if random.random() < 0.1:  # 降低钥匙损坏概率
                player.inventory['钥匙'] -= 1
                print("钥匙损坏了！")
            else:
                print("钥匙还能继续使用")
            
            luck = random.random()
            if luck < 0.1:
                player.max_health += 20
                player.health = min(player.max_health, player.health + 20)
                print("找到生命药水！永久增加20点最大生命值")
            elif luck < 0.3:
                player.sword_level += 1
                print("找到强化石！武器等级+1")
            elif luck < 0.6:
                player.armor_level += 1
                print("找到护甲片！护甲等级+1")
            elif luck < 0.8:
                player.inventory['石头'] += 5
                player.inventory['木头'] += 5
                print("找到资源包！获得石头×5和木头×5")
            else:
                print("宝箱是空的...")
            
            # 日常操作获得少量经验
            player.gain_exp(15)
    else:
        print("\n洞穴深处有个上锁的宝箱，但你没有钥匙")

def beach_event(player):
    print("\n============== 沙滩探索 ==============")
    
    if not player.consume_stamina(10) or not player.consume_energy(10):
        return
    
    # 提高钥匙获取概率到40%
    if random.random() < 0.5:  # 40%几率找到钥匙
        player.inventory['钥匙'] += 1
        print("找到1把钥匙！")
    else:
        found = random.choice([
            ('木头', random.randint(3, 5)),
            ('纤维', random.randint(2, 4)),
            ('盐', random.randint(1, 2))
        ])
        player.inventory[found[0]] += found[1]
        print(f"找到{found[0]}×{found[1]}")
    
    # 捕鱼
    action = input("\n要在海边捕鱼吗？(消耗10体力)(y/n): ").lower()
    if action == 'y' and player.consume_stamina(10):
        fish_chance = random.random()
        if fish_chance < 0.6:
            fish_amount = random.randint(1, 2)
            
            # 宠物加成
            if player.active_pet:
                fish_amount += player.active_pet.level // 2
                print(f"{player.active_pet.name}帮你捕鱼！")
            
            player.inventory['鱼'] += fish_amount
            expiry = datetime.now() + timedelta(hours=24)
            player.food_expiry['鱼'] = expiry
            print(f"捕到了{fish_amount}条鱼！(保质期24小时)")
        else:
            print("今天没有捕到鱼")
    
    if random.random() < 0.5:
        salt_amount = random.randint(1, 2)
        player.inventory['盐'] += salt_amount
        print(f"在沙滩上收集到盐×{salt_amount}")
    
    # 日常操作获得少量经验
    player.gain_exp(10)

def lake_event(player):
    print("\n============== 湖泊探索 ==============")
    
    if not player.consume_stamina(10) or not player.consume_energy(10):
        return
    
    fish_chance = random.random()
    if fish_chance < 0.7:
        fish_amount = random.randint(1, 3)
        
        # 宠物加成
        if player.active_pet:
            fish_amount += player.active_pet.level // 2
            print(f"{player.active_pet.name}帮你钓鱼！")
        
        player.inventory['鱼'] += fish_amount
        expiry = datetime.now() + timedelta(hours=24)
        player.food_expiry['鱼'] = expiry
        print(f"钓到了{fish_amount}条鱼！(保质期24小时)")
    else:
        print("今天鱼儿不上钩...")
    
    # 淡水湖不应该找到盐，改为找到草药
    if random.random() < 0.4:
        herb_amount = random.randint(1, 2)
        player.inventory['草药'] += herb_amount
        print(f"在湖边发现了草药×{herb_amount}")
    
    # 日常操作获得少量经验
    player.gain_exp(10)

def mountain_event(player):
    print("\n============== 山脉探索 ==============")
    
    if not player.consume_stamina(20) or not player.consume_energy(10):
        return
    
    # 特殊资源
    resource = random.choice([
        ('水晶', 1),
        ('草药', 2),
        ('石头', 3)
    ])
    
    # 宠物和技能加成
    if player.active_pet:
        resource = (resource[0], resource[1] + player.active_pet.level // 3)
        print(f"{player.active_pet.name}帮你寻找资源！")
    
    if "采集效率+" in player.passive_skills:
        resource = (resource[0], resource[1] + player.passive_skills["采集效率+"])
    
    player.inventory[resource[0]] += resource[1]
    print(f"发现{resource[0]}×{resource[1]}")
    
    # 特殊事件
    if random.random() < 0.2:
        if player.inventory['水晶'] >= 3:
            player.inventory['水晶'] -= 3
            player.max_health += 15
            player.health = min(player.max_health, player.health + 15)
            print("使用水晶制作了护身符，最大生命值+15")
        elif player.inventory['草药'] >= 5:
            player.inventory['草药'] -= 5
            heal = 40
            player.health = min(player.max_health, player.health + heal)
            print("使用草药制作了药膏，恢复40点生命值")
    
    # 野兽遭遇 (40%几率)
    if random.random() < 0.4:
        beast_event(player, "山脉")
    
    # 日常操作获得少量经验
    player.gain_exp(15)

def ruins_event(player):
    print("\n============== 遗迹探索 ==============")
    
    if not player.consume_stamina(30) or not player.consume_energy(10):
        return
    
    if not player.unlocked_secret:
        print("你发现了一处古老遗迹，似乎隐藏着岛屿的秘密...")
        player.unlocked_secret = True
        return
    
    # 遗迹怪物 (强力)
    print("遗迹中潜伏着强大的守护者！")
    beast_level = random.randint(player.level + 2, player.level + 5)
    print(f"你遇到了{beast_level}级遗迹守护者，进入战斗！")
    
    action = input("要战斗吗？(y/n，逃跑会损失30体力): ").lower()
    if action != 'y':
        if player.consume_stamina(30):
            print("你成功逃跑了，但损失了大量体力")
        else:
            print("体力不足，被迫战斗！")
            action = 'y'
    
    if action == 'y':
        if not player.consume_stamina(40):
            print("体力不足，自动逃跑失败！")
            damage = beast_level * 10
            player.health -= damage*5
            print(f"受到{damage*5}点伤害")
            return
        
        # 战斗计算
        player_power = player.sword_level * 8 + player.level * 3
        beast_power = beast_level * 12
        
        # 宠物和技能加成
        if player.active_pet:
            player_power += player.active_pet.level * 5
            print(f"{player.active_pet.name}协助你战斗！")
        
        # 怪物技能加成
        for skill, level in player.monster_skills.items():
            if skill == "黑虎掏心":
                player_power += level * 3
            elif skill == "闪避":
                beast_power = int(beast_power * (1 - level * 0.05))
            elif skill == "毒杀":
                player_power += int(player.health * level * 0.01)
            elif skill == "熊躯":
                player_power += level * 2
            elif skill == "撕咬":
                player_power += int((player.max_health - player.health) * level * 0.02)
            elif skill == "吸血":
                player_power += level * 2
            elif skill == "冲撞":
                player_power += level * 3
            elif skill == "粘液":
                beast_power = int(beast_power * (1 - level * 0.03))
        
        crit_chance = player.passive_skills.get("暴击率+", 0) * 0.05
        if random.random() < crit_chance:
            player_power *= 2
            print("触发暴击！")
        
        # 显示战斗过程
        print("\n=== 战斗开始 ===")
        print(f"你的攻击力: {player_power}")
        print(f"敌人的攻击力: {beast_power}")
        
        if player_power >= beast_power:
            exp_gain = beast_level * 20
            player.gain_exp(exp_gain)
            if player.active_pet:
                pet_exp = beast_level * 5
                player.active_pet.gain_exp(pet_exp)
                print(f"{player.active_pet.name}获得了{pet_exp}经验")
            
            print(f"\n战斗胜利！获得{exp_gain}经验值")
            
            loot = random.choice([
                ('石头', random.randint(5, 10)),
                ('兽皮', random.randint(3, 5)),
                ('钥匙', 2),
                ('水晶', 2)
            ])
            player.inventory[loot[0]] += loot[1]
            print(f"获得战利品: {loot[0]}×{loot[1]}")
            
            if random.random() < 0.5:
                extra_loot = ('木头', random.randint(5, 10))
                player.inventory[extra_loot[0]] += extra_loot[1]
                print(f"额外获得: {extra_loot[0]}×{extra_loot[1]}")
            
            # 解锁或升级怪物技能
            if random.random() < 0.3:
                skill = random.choice(["黑虎掏心", "闪避", "毒杀", "熊躯", "撕咬", "吸血", "冲撞", "粘液"])
                player.monster_skills[skill] += 1
                print(f"领悟了{skill}技能，当前等级: {player.monster_skills[skill]}")
        else:
            damage = max(10, beast_power - player_power - player.armor_level * 5)
            if "伤害减免+" in player.passive_skills:
                damage = int(damage * (1 - player.passive_skills["伤害减免+"] * 0.05))
            player.health -= damage*3
            print(f"\n战斗失败！受到{damage*3}点伤害")
            player.health_points = max(0, player.health_points - 1)

def shipyard_event(player):
    print("\n============== 船坞 ==============")
    
    if not player.consume_stamina(10) or not player.consume_energy(10):
        return False
    
    if player.unlocked_ship:
        print(f"造船进度: 木头 {player.inventory['木头']}/100, 纤维 {player.inventory['纤维']}/50, 兽皮 {player.inventory['兽皮']}/20")
        if player.inventory['木头'] >= 100 and player.inventory['纤维'] >= 50 and player.inventory['兽皮'] >= 20:
            print("\n材料已齐备，可以立即启航！")
            print("恭喜你成功逃离了岛屿！")
            return True
        else:
            print("继续收集材料吧")
    else:
        print("你研究了破船的结构，学会了造船技术！")
        player.unlocked_ship = True
    
    # 日常操作获得少量经验
    player.gain_exp(10)
    return False

def beast_event(player, location):
    beast_types = {
        "森林": ["老虎", "狼", "野猪", "蜘蛛"],
        "洞穴": ["蝙蝠群", "蜘蛛", "蛇"],
        "山脉": ["熊", "鹰", "雪豹"],
        "湖泊": ["鳄鱼", "水蛇", "巨型青蛙"]
    }
    
    beast_type = random.choice(beast_types.get(location, ["野兽"]))
    beast_level = random.randint(max(1, player.level - 2), player.level + 2)  # 怪物等级随玩家等级变化
    print(f"\n你遇到了{beast_level}级{beast_type}，进入战斗！")
    
    # 战斗计算
    player_power = player.sword_level * 5 + player.level * 2
    beast_power = beast_level * 8
    
    # 宠物和技能加成
    if player.active_pet:
        player_power += player.active_pet.level * 3
        print(f"{player.active_pet.name}协助你战斗！")
    
    # 怪物技能加成
    for skill, level in player.monster_skills.items():
        if skill == "黑虎掏心" and "老虎" in beast_type:
            player_power += level * 5
        elif skill == "闪避" and ("狼" in beast_type or "雪豹" in beast_type or "鹰" in beast_type):
            beast_power = int(beast_power * (1 - level * 0.05))
        elif skill == "毒杀" and ("蛇" in beast_type or "蜘蛛" in beast_type):
            player_power += int(player.health * level * 0.01)
        elif skill == "熊躯" and "熊" in beast_type:
            player_power += level * 3
        elif skill == "撕咬" and ("鳄鱼" in beast_type or "老虎" in beast_type or "狼" in beast_type):
            player_power += int((player.max_health - player.health) * level * 0.02)
        elif skill == "吸血" and "蜘蛛" in beast_type:
            player_power += level * 2
            heal = min(level * 3, player.max_health - player.health)
            player.health += heal
            print(f"蜘蛛吸血技能恢复了{heal}点生命值！")
        elif skill == "冲撞" and "野猪" in beast_type:
            player_power += level * 3
            beast_power = int(beast_power * 0.9)  # 野猪冲撞降低敌人攻击力
        elif skill == "粘液" and "巨型青蛙" in beast_type:
            beast_power = int(beast_power * (1 - level * 0.03))
    
    crit_chance = player.passive_skills.get("暴击率+", 0) * 0.05
    if random.random() < crit_chance:
        player_power *= 2
        print("触发暴击！")
    
    # 显示战斗过程
    print("\n=== 战斗开始 ===")
    print(f"你的攻击力: {player_power}")
    print(f"敌人的攻击力: {beast_power}")
    
    if player_power >= beast_power:
        exp_gain = beast_level * 10
        if "战斗经验+" in player.passive_skills:
            exp_gain = int(exp_gain * (1 + player.passive_skills["战斗经验+"] * 0.1))
        
        player.gain_exp(exp_gain)
        if player.active_pet:
            pet_exp = beast_level * 3
            player.active_pet.gain_exp(pet_exp)
            print(f"{player.active_pet.name}获得了{pet_exp}经验")
        
        print(f"\n战斗胜利！获得{exp_gain}经验值")
        
        loot_options = {
            "老虎": [('兽皮', 2), ('生肉', 2)],
            "狼": [('兽皮', 1), ('生肉', 1)],
            "野猪": [('兽皮', 1), ('生肉', 2)],
            "蜘蛛": [('纤维', 1), ('草药', 1)],
            "蝙蝠群": [('纤维', 2)],
            "蛇": [('兽皮', 1), ('草药', 1)],
            "熊": [('兽皮', 3), ('生肉', 3)],
            "鹰": [('纤维', 1), ('生肉', 1)],
            "雪豹": [('兽皮', 2), ('生肉', 1)],
            "鳄鱼": [('兽皮', 2), ('生肉', 2)],
            "水蛇": [('兽皮', 1), ('草药', 1)],
            "巨型青蛙": [('纤维', 1), ('生肉', 1)]
        }
        
        loot = random.choice(loot_options.get(beast_type, [('石头', 1), ('兽皮', 1)]))
        player.inventory[loot[0]] += loot[1]
        
        if loot[0] == '生肉':
            expiry = datetime.now() + timedelta(hours=24)
            player.food_expiry['生肉'] = expiry
        
        print(f"获得战利品: {loot[0]}×{loot[1]}")
        
        if random.random() < 0.3:
            extra_loot = ('兽皮', 1)
            player.inventory[extra_loot[0]] += extra_loot[1]
            print(f"额外获得: {extra_loot[0]}×{extra_loot[1]}")
        
        # 解锁或升级怪物技能
        if random.random() < 0.2:
            skill_options = {
                "老虎": "黑虎掏心",
                "狼": "闪避",
                "蛇": "毒杀",
                "熊": "熊躯",
                "鳄鱼": "撕咬",
                "蜘蛛": "吸血",
                "野猪": "冲撞",
                "巨型青蛙": "粘液"
            }
            
            if beast_type in skill_options:
                skill = skill_options[beast_type]
                player.monster_skills[skill] += 1
                print(f"领悟了{skill}技能，当前等级: {player.monster_skills[skill]}")
    else:
        damage = max(5, beast_power - player_power - player.armor_level * 3)
        if "伤害减免+" in player.passive_skills:
            damage = int(damage * (1 - player.passive_skills["伤害减免+"] * 0.05))
        player.health -= damage
        print(f"\n战斗失败！受到{damage}点伤害")
        player.health_points = max(0, player.health_points - 1)

def process_food(player):
    print("\n============== 食物处理 ==============")
    options = []
    
    if player.inventory['生肉'] > 0 and player.inventory['木头'] > 0:
        options.append(('熏制生肉', '消耗1木头将1生肉变成熏肉'))
    
    if player.inventory['鱼'] > 0 and player.inventory['木头'] > 0 and player.inventory['盐'] > 0:
        options.append(('熏制鱼', '消耗1木头和1盐将1鱼变成熏鱼'))
    
    if player.inventory['兽皮'] >= 3 and player.inventory['纤维'] >= 2:
        options.append(('制作皮甲', '消耗3兽皮和2纤维提升1级护甲'))
    
    if not options:
        print("没有可处理的食物或材料")
        return
    
    for i, (name, desc) in enumerate(options, 1):
        print(f"{i}. {name}: {desc}")
    
    try:
        choice = int(input("选择要进行的处理(输入编号): ")) - 1
        if 0 <= choice < len(options):
            action = options[choice][0]
            
            if action == '熏制生肉':
                if player.inventory['生肉'] < 1 or player.inventory['木头'] < 1:
                    print("材料不足！")
                    return
                
                player.inventory['生肉'] -= 1
                player.inventory['木头'] -= 1
                player.inventory['熏肉'] += 1
                if '生肉' in player.food_expiry:
                    del player.food_expiry['生肉']
                print("成功熏制1块生肉")
                player.health_points = min(50, player.health_points + 1)
            
            elif action == '熏制鱼':
                if player.inventory['鱼'] < 1 or player.inventory['木头'] < 1 or player.inventory['盐'] < 1:
                    print("材料不足！")
                    return
                
                player.inventory['鱼'] -= 1
                player.inventory['木头'] -= 1
                player.inventory['盐'] -= 1
                player.inventory['熏鱼'] += 1
                if '鱼' in player.food_expiry:
                    del player.food_expiry['鱼']
                print("成功熏制1条鱼")
                player.health_points = min(50, player.health_points + 1)
            
            elif action == '制作皮甲':
                if player.inventory['兽皮'] < 3 or player.inventory['纤维'] < 2:
                    print("材料不足！")
                    return
                
                player.inventory['兽皮'] -= 3
                player.inventory['纤维'] -= 2
                player.armor_level += 1
                print("护甲等级提升1级！")
            
            # 日常操作获得少量经验
            player.gain_exp(10)
        else:
            print("无效选择")
    except ValueError:
        print("请输入有效的数字")

def text_adventure():
    print("神秘岛冒险")
    print("======================")
    print("你醒来发现自己在一个陌生的岛屿上...")
    
    player = Player()
    game_over = False
    locations = ['森林', '洞穴', '沙滩', '山脉', '湖泊']
    
    while not game_over:
        player.check_food_expiry()
        
        low_energy = player.energy <= 20
        low_stamina = player.stamina <= 20
        
        player.show_status()
        
        # 健康值检查
        if player.health_points <= 0:
            print("\n你的健康状况恶化，无法继续冒险！")
            print("游戏结束！")
            break
        
        # 检查宠物饥饿
        if player.active_pet and player.active_pet.hunger >= 10:
            print(f"\n警告：{player.active_pet.name}饿坏了，拒绝协助你！")
        
        print("\n主菜单:")
        print("1. 探索地点")
        print("2. 食用食物")
        print("3. 处理食物/材料")
        print("4. 装备升级")
        print("5. 宠物管理")
        if low_energy or low_stamina:
            print("6. 休息(推荐)")
        else:
            print("6. 休息")
        print("7. 查看状态")
        
        try:
            menu_choice = int(input("选择要进行的操作(输入编号): "))
            
            if menu_choice == 1:
                if player.energy <= 0:
                    print("\n你太累了，需要休息！")
                    continue
                
                available_locations = random.sample(locations, 2)
                if player.unlocked_secret:
                    available_locations.append('遗迹')
                if player.unlocked_ship:
                    available_locations.append('船坞')
                
                print("\n你可以去:")
                for i, location in enumerate(available_locations, 1):
                    print(f"{i}. {location}")
                
                try:
                    choice = int(input("请选择要去的地方(输入编号): ")) - 1
                    
                    if 0 <= choice < len(available_locations):
                        current_location = available_locations[choice]
                        
                        if current_location == "森林":
                            forest_event(player)
                        elif current_location == "洞穴":
                            cave_event(player)
                        elif current_location == "沙滩":
                            beach_event(player)
                        elif current_location == "山脉":
                            mountain_event(player)
                        elif current_location == "湖泊":
                            lake_event(player)
                        elif current_location == "遗迹":
                            ruins_event(player)
                        elif current_location == "船坞":
                            if shipyard_event(player):
                                game_over = True
                                continue
                        
                        if player.health <= 0:
                            print("\n你死了...游戏结束！")
                            game_over = True
                    else:
                        print("无效选择！")
                
                except ValueError:
                    print("请输入有效的数字")
            
            elif menu_choice == 2:
                player.eat_food()
            
            elif menu_choice == 3:
                process_food(player)
            
            elif menu_choice == 4:
                player.upgrade_equipment()
            
            elif menu_choice == 5:
                player.manage_pets()
            
            elif menu_choice == 6:
                player.sleep()
            
            elif menu_choice == 7:
                continue
            
            else:
                print("无效选择！")
        
        except ValueError:
            print("请输入有效的数字")

if __name__ == "__main__":
    text_adventure()
